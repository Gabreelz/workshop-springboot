--- Spring Boot API ---

Programa para estudar o web service

- criar projeto Spring boot java
- IMPLEMENTAR MODELO DE DOMINIO
- ESTRUTURAR CAMADA LOGICA: resource, service, repository.
- Configurar o banco de dados de teste(H2)


----- 1° commit -----
Implementação da entitie User.java (representa a tabela do usuario)
Implementação parcial (para testes) do resource UserResource (Recebe informalções e retornam respostas)

----- 2° commit -----
Atualizando o User - formatando JPA e a dependencia H2
application-test.properties → configuração específica do perfil test (onde o banco H2 será definido).
Entity: JPA mapping → mapear a classe User com @Entity, @Table, e atributos com @Id, @GeneratedValue, etc.

----- 3° commit -----
✅ UserRepository extends JpaRepository<User, Long> (salva dados)
✅ Classe TestConfig com @Configuration e @Profile("test")
✅ @Autowired UserRepository para injetar a dependência
✅ Criar objetos em memória (u1, u2)
✅ Persistir no banco (saveAll)

----- 4° commit -----
Service layer, component registration

1 - Camada de Serviço: A camada de serviço é essencial para separar as responsabilidades dentro de 
um framework com injeção de dependência, permitindo que o controlador se concentre na interação com 
o usuário, enquanto as regras de negócio são geridas na camada de serviço.
2 - Intermediação: Discutimos a importância de evitar que o controlador acesse diretamente o 
repositório, pois isso poderia sobrecarregá-lo com regras de negócio. A camada de serviço atua 
como intermediária facilitando operações mais complexas.
3 - Implementação Prática: Criamos a classe UserService, que possui métodos para buscar todos os 
usuários e um usuário específico por ID, conectando-a ao repositório de usuários através de 
injeção de dependência.
4 - Registro de Componentes: Aprendemos sobre o uso de anotações como @Component e @Service para 
registrar nossas classes no mecanismo de injeção de dependência do framework, permitindo a injeção 
automática.

------ 5° commit ------
Order
- Classe @Entity com id, moment, relações com User e OrderItem

OrderRepository
- Interface JpaRepository<Order, Long>

OrderSeeder
- CommandLineRunner para salvar pedidos iniciais

OrderService
- Métodos findAll, findById, save

OrderResource
- Endpoints GET /orders, GET /orders/{id}, POST /orders

----- 6° commit -----
Enum OrderStatus

----- 7° Commit -----
Category Entity

----- 8° Commit -----
Product Entity

